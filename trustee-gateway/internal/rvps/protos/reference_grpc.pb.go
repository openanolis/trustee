// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.5.0
// source: protos/reference.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReferenceValueProviderService_QueryReferenceValue_FullMethodName    = "/reference.ReferenceValueProviderService/QueryReferenceValue"
	ReferenceValueProviderService_RegisterReferenceValue_FullMethodName = "/reference.ReferenceValueProviderService/RegisterReferenceValue"
)

// ReferenceValueProviderServiceClient is the client API for ReferenceValueProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferenceValueProviderServiceClient interface {
	QueryReferenceValue(ctx context.Context, in *ReferenceValueQueryRequest, opts ...grpc.CallOption) (*ReferenceValueQueryResponse, error)
	RegisterReferenceValue(ctx context.Context, in *ReferenceValueRegisterRequest, opts ...grpc.CallOption) (*ReferenceValueRegisterResponse, error)
}

type referenceValueProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceValueProviderServiceClient(cc grpc.ClientConnInterface) ReferenceValueProviderServiceClient {
	return &referenceValueProviderServiceClient{cc}
}

func (c *referenceValueProviderServiceClient) QueryReferenceValue(ctx context.Context, in *ReferenceValueQueryRequest, opts ...grpc.CallOption) (*ReferenceValueQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReferenceValueQueryResponse)
	err := c.cc.Invoke(ctx, ReferenceValueProviderService_QueryReferenceValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceValueProviderServiceClient) RegisterReferenceValue(ctx context.Context, in *ReferenceValueRegisterRequest, opts ...grpc.CallOption) (*ReferenceValueRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReferenceValueRegisterResponse)
	err := c.cc.Invoke(ctx, ReferenceValueProviderService_RegisterReferenceValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceValueProviderServiceServer is the server API for ReferenceValueProviderService service.
// All implementations must embed UnimplementedReferenceValueProviderServiceServer
// for forward compatibility.
type ReferenceValueProviderServiceServer interface {
	QueryReferenceValue(context.Context, *ReferenceValueQueryRequest) (*ReferenceValueQueryResponse, error)
	RegisterReferenceValue(context.Context, *ReferenceValueRegisterRequest) (*ReferenceValueRegisterResponse, error)
	mustEmbedUnimplementedReferenceValueProviderServiceServer()
}

// UnimplementedReferenceValueProviderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferenceValueProviderServiceServer struct{}

func (UnimplementedReferenceValueProviderServiceServer) QueryReferenceValue(context.Context, *ReferenceValueQueryRequest) (*ReferenceValueQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReferenceValue not implemented")
}
func (UnimplementedReferenceValueProviderServiceServer) RegisterReferenceValue(context.Context, *ReferenceValueRegisterRequest) (*ReferenceValueRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReferenceValue not implemented")
}
func (UnimplementedReferenceValueProviderServiceServer) mustEmbedUnimplementedReferenceValueProviderServiceServer() {
}
func (UnimplementedReferenceValueProviderServiceServer) testEmbeddedByValue() {}

// UnsafeReferenceValueProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferenceValueProviderServiceServer will
// result in compilation errors.
type UnsafeReferenceValueProviderServiceServer interface {
	mustEmbedUnimplementedReferenceValueProviderServiceServer()
}

func RegisterReferenceValueProviderServiceServer(s grpc.ServiceRegistrar, srv ReferenceValueProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedReferenceValueProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReferenceValueProviderService_ServiceDesc, srv)
}

func _ReferenceValueProviderService_QueryReferenceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceValueQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceValueProviderServiceServer).QueryReferenceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceValueProviderService_QueryReferenceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceValueProviderServiceServer).QueryReferenceValue(ctx, req.(*ReferenceValueQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceValueProviderService_RegisterReferenceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceValueRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceValueProviderServiceServer).RegisterReferenceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceValueProviderService_RegisterReferenceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceValueProviderServiceServer).RegisterReferenceValue(ctx, req.(*ReferenceValueRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferenceValueProviderService_ServiceDesc is the grpc.ServiceDesc for ReferenceValueProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferenceValueProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reference.ReferenceValueProviderService",
	HandlerType: (*ReferenceValueProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryReferenceValue",
			Handler:    _ReferenceValueProviderService_QueryReferenceValue_Handler,
		},
		{
			MethodName: "RegisterReferenceValue",
			Handler:    _ReferenceValueProviderService_RegisterReferenceValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/reference.proto",
}
